name: Android Build

### To build from subfolder,just modify the 'ANDROID_DIR'

on:
  push:
    # branches: [ "main","master","dev","release" ]
    ### Start build only on these branches
  workflow_dispatch:
  ### Support manual build in 'Actions/workflow'

env:
  ANDROID_DIR: .
  ### Build from project root (when 'app' folder is just at project root)
  # ANDROID_DIR: android
  ### Build from 'android' folder (when 'app' folder is in 'project/android' folder), modify it as you need.

permissions:
  contents: write

jobs:
  build_apk:
    strategy:
      matrix:
        # build_type: ['debug', 'release']
        build_type: ['release']
    name: Build APK
    runs-on: ubuntu-latest
    steps:

      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.12.1
        with:
          access_token: ${{ github.token }}

      - name: Checkout code
        uses: actions/checkout@v4


      ### 自动接受所有Android许可证（含Preview）并安装NDK(需手动取消注释)
      - name: Accept Android licenses and install NDK
        run: |
          ### 安装交互式应答工具expect
          sudo apt-get update && sudo apt-get install -y expect
          ### 修复语法错误+处理Preview许可证初始询问
          expect -c '
            set timeout 300
            spawn /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager --licenses
            ### 1. 先处理初始询问："Review licenses that have not been accepted (y/N)?"
            expect {
              "Review licenses that have not been accepted (y/N)?" {
                send "y\r"
                exp_continue
              }
            }
            ### 2. 再处理所有许可证的Accept确认
            while {[expect {
              "Accept? (y/N):" {
                send "y\r"
                exp_continue
              }
              ### 忽略进度条输出，避免干扰匹配
              -re "\[.*\] \d+%.*" {
                exp_continue
              }
              ### 监听流程结束（必须返回布尔值，修复语法错误）
              eof {
                return 1
              }
            }]} {}
          '
          ### 直接安装所需NDK（所有许可证已接受）
          # /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager "ndk;29.0.13599879"
        shell: bash



      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/gradle-wrapper.properties', '**/build.gradle') }}

      - name: Increase Gradle memory
        working-directory: ${{ env.ANDROID_DIR }}
        run: |
          printf "\norg.gradle.jvmargs=-Xmx4g -XX:MaxMetaspaceSize=1g\n" >> gradle.properties

      - name: Make gradlew executable
        working-directory: ${{ env.ANDROID_DIR }}
        run: |
          if [ ! -f "gradlew" ]; then gradle wrapper; fi
          chmod +x gradlew

      - name: Build ${{ matrix.build_type }} APK
        working-directory: ${{ env.ANDROID_DIR }}
        run: |
          build_type=${{ matrix.build_type }}
          ./gradlew assemble${build_type^}

      - name: Show apk paths
        run: |
            echo ">>${{ env.ANDROID_DIR }}/app/build/outputs/apk/${{ matrix.build_type }}:"
            ls -la ${{ env.ANDROID_DIR }}/app/build/outputs/apk/${{ matrix.build_type }}

      - name: Copy ${{ matrix.build_type }} APK
        run: |
          cp ${{ env.ANDROID_DIR }}/app/build/outputs/apk/${{ matrix.build_type }}/*.apk ./

      - name: Upload ${{ matrix.build_type }} APK
        uses: actions/upload-artifact@v4
        with:
          name: apk-${{ matrix.build_type }}
          path: app-${{ matrix.build_type }}.apk

